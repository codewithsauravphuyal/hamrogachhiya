// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model with role-based access
model User {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(100)
  email     String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  role      UserRole @default(CUSTOMER)
  avatar    String?
  phone     String?  @db.VarChar(20)
  isVerified Boolean @default(false)
  isActive  Boolean  @default(true)
  lastLogin DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  addresses Address[]
  stores    Store[]
  orders    Order[]
  payments  Payment[]
  reviews   Review[]
  cart      Cart?
  cartItems CartItem[]

  @@map("users")
  @@index([email])
  @@index([role])
  @@index([isActive])
}

enum UserRole {
  ADMIN
  SELLER
  CUSTOMER
}

// Address model for shipping
model Address {
  id       String @id @default(cuid())
  userId   String
  type     AddressType @default(HOME)
  name     String @db.VarChar(100)
  phone    String @db.VarChar(20)
  address  String @db.VarChar(255)
  city     String @db.VarChar(100)
  state    String @db.VarChar(100)
  pincode  String @db.VarChar(10)
  isDefault Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]

  @@map("addresses")
  @@index([userId])
  @@index([isDefault])
}

enum AddressType {
  HOME
  WORK
  OTHER
}

// Category model with hierarchical structure
model Category {
  id          String @id @default(cuid())
  name        String @db.VarChar(100)
  slug        String @unique @db.VarChar(100)
  description String? @db.VarChar(500)
  image       String?
  icon        String?
  parentId    String?
  level       Int    @default(0)
  isActive    Boolean @default(true)
  sortOrder   Int    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  parent     Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children   Category[] @relation("CategoryHierarchy")
  stores     Store[]
  products   Product[]
  subcategories Product[] @relation("SubcategoryProducts")

  @@map("categories")
  @@index([slug])
  @@index([parentId])
  @@index([isActive])
  @@index([level])
}

// Store model
model Store {
  id            String @id @default(cuid())
  sellerId      String
  name          String @db.VarChar(100)
  slug          String @unique @db.VarChar(100)
  description   String? @db.VarChar(1000)
  logo          String?
  banner        String?
  domain        String? @unique @db.VarChar(255)
  categoryId    String?
  contactEmail  String @db.VarChar(255)
  contactPhone  String? @db.VarChar(20)
  street        String? @db.VarChar(255)
  city          String? @db.VarChar(100)
  state         String? @db.VarChar(100)
  pincode       String? @db.VarChar(10)
  country       String? @db.VarChar(100)
  rating        Float  @default(0)
  reviewCount   Int    @default(0)
  isVerified    Boolean @default(false)
  isActive      Boolean @default(true)
  allowReviews  Boolean @default(true)
  autoAcceptOrders Boolean @default(false)
  minimumOrderAmount Float @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  seller   User      @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id])
  products Product[]

  @@map("stores")
  @@index([slug])
  @@index([sellerId])
  @@index([isActive])
  @@index([categoryId])
  @@index([rating])
}

// Product variant model
model ProductVariant {
  id        String @id @default(cuid())
  productId String
  name      String @db.VarChar(50)
  value     String @db.VarChar(100)
  price     Float?
  stock     Int    @default(0)
  sku       String? @unique @db.VarChar(100)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
  @@index([productId])
  @@index([sku])
}

// Product model
model Product {
  id              String @id @default(cuid())
  storeId         String
  name            String @db.VarChar(255)
  slug            String @db.VarChar(255)
  description     String @db.Text
  shortDescription String? @db.VarChar(200)
  price           Float
  originalPrice   Float?
  images          String[] // Array of image URLs
  categoryId      String
  subcategoryId   String?
  brand           String? @db.VarChar(100)
  tags            String[] // Array of tags
  stock           Int     @default(0)
  sku             String? @unique @db.VarChar(100)
  weight          Float?
  length          Float?
  width           Float?
  height          Float?
  rating          Float   @default(0)
  reviewCount     Int     @default(0)
  isActive        Boolean @default(true)
  isFeatured      Boolean @default(false)
  seoTitle        String? @db.VarChar(255)
  seoDescription  String? @db.VarChar(500)
  keywords        String[] // Array of keywords
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  store         Store           @relation(fields: [storeId], references: [id], onDelete: Cascade)
  category      Category        @relation(fields: [categoryId], references: [id])
  subcategory   Category?       @relation("SubcategoryProducts", fields: [subcategoryId], references: [id])
  variants      ProductVariant[]
  orderItems    OrderItem[]
  cartItems     CartItem[]
  reviews       Review[]

  @@map("products")
  @@index([storeId])
  @@index([categoryId])
  @@index([subcategoryId])
  @@index([slug])
  @@index([isActive])
  @@index([isFeatured])
  @@index([price])
  @@index([rating])
  @@index([brand])
  @@index([sku])
  @@index([tags])
  @@index([name, description], type: Gin)
}

// Cart item model
model CartItem {
  id        String @id @default(cuid())
  cartId    String
  productId String
  quantity  Int
  price     Float
  variantId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cart    Cart         @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant ProductVariant? @relation(fields: [variantId], references: [id])

  @@map("cart_items")
  @@index([cartId])
  @@index([productId])
}

// Cart model
model Cart {
  id        String @id @default(cuid())
  userId    String @unique
  total     Float  @default(0)
  itemCount Int    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items    CartItem[]

  @@map("carts")
  @@index([userId])
}

// Order item model
model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  total     Float
  variantId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  order   Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product      @relation(fields: [productId], references: [id])
  variant ProductVariant? @relation(fields: [variantId], references: [id])

  @@map("order_items")
  @@index([orderId])
  @@index([productId])
}

// Order model
model Order {
  id               String      @id @default(cuid())
  orderNumber      String      @unique @db.VarChar(50)
  userId           String
  subtotal         Float
  tax              Float       @default(0)
  deliveryFee      Float       @default(0)
  discount         Float       @default(0)
  total            Float
  status           OrderStatus @default(PENDING)
  paymentStatus    PaymentStatus @default(PENDING)
  deliveryAddressId String
  estimatedDelivery DateTime?
  actualDelivery   DateTime?
  notes            String?     @db.Text
  trackingNumber   String?     @db.VarChar(100)
  trackingUrl      String?     @db.VarChar(500)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  // Relations
  user           User        @relation(fields: [userId], references: [id])
  deliveryAddress Address    @relation(fields: [deliveryAddressId], references: [id])
  items          OrderItem[]
  payments       Payment[]

  @@map("orders")
  @@index([orderNumber])
  @@index([userId])
  @@index([status])
  @@index([paymentStatus])
  @@index([createdAt])
  @@index([deliveryAddressId])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PACKED
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

// Payment model
model Payment {
  id             String        @id @default(cuid())
  orderId        String
  userId         String
  method         PaymentMethod
  amount         Float
  currency       String        @default("USD") @db.VarChar(3)
  transactionId  String?       @unique @db.VarChar(255)
  status         PaymentStatus @default(PENDING)
  gatewayResponse Json?
  refundAmount   Float         @default(0)
  refundReason   String?       @db.VarChar(500)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id])

  @@map("payments")
  @@index([orderId])
  @@index([transactionId])
  @@index([status])
  @@index([method])
}

enum PaymentMethod {
  COD
  KHALTI
  ESEWA
  CARD
  BANK_TRANSFER
}

// Review model
model Review {
  id        String @id @default(cuid())
  userId    String
  productId String
  orderId   String?
  rating    Int
  title     String? @db.VarChar(100)
  comment   String? @db.VarChar(1000)
  images    String[] // Array of image URLs
  isVerified Boolean @default(false)
  isActive  Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User  @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  order   Order? @relation(fields: [orderId], references: [id])

  @@map("reviews")
  @@index([productId])
  @@index([userId])
  @@index([rating])
  @@index([isActive])
  @@index([isVerified])
  @@unique([userId, productId, orderId])
}

// Review helpful votes model
model ReviewHelpful {
  id       String @id @default(cuid())
  reviewId String
  userId   String
  helpful  Boolean
  createdAt DateTime @default(now())

  // Relations
  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id])

  @@map("review_helpful")
  @@unique([reviewId, userId])
  @@index([reviewId])
  @@index([userId])
} 